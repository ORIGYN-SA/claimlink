spec:
  inputs:
    src-folder:
      description: The front-end project folder name. Must be located in the /frontend/ folder
      options: ["claimlink_frontend"]
    sns-controlled:
      description: Whether or not the canister is SNS controlled
      options: ["true", "false"]
---
# STAGING AND PREPROD DEPLOYMENT

.staging deploy template:
  stage: deploy
  resource_group: frontend staging deployment
  variables:
    PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - !reference [.import dfx identity, before_script]
    - !reference [.include didc, before_script]

$[[ inputs.src-folder ]] staging deploy:
  extends: .staging deploy template
  variables:
    TARGET_NETWORK: staging
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "frontend/$[[ inputs.src-folder ]]/*.{js,json}"
        - "frontend/$[[ inputs.src-folder ]]/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME != "develop"
      changes:
        - "frontend/$[[ inputs.src-folder ]]/*.{js,json}"
        - "frontend/$[[ inputs.src-folder ]]/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      when: manual
      allow_failure: true
  needs: ["$[[ inputs.src-folder ]] staging build"]
  script:
    - dfx deploy --network $TARGET_NETWORK --no-wallet --mode reinstall -y $[[ inputs.src-folder ]]
  environment:
    name: $[[ inputs.src-folder ]] frontend
    deployment_tier: staging
    action: start

$[[ inputs.src-folder ]] preprod deploy:
  extends: .staging deploy template
  variables:
    TARGET_NETWORK: preprod
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "frontend/$[[ inputs.src-folder ]]/*.{js,json}"
        - "frontend/$[[ inputs.src-folder ]]/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME != "develop"
      changes:
        - "frontend/$[[ inputs.src-folder ]]/*.{js,json}"
        - "frontend/$[[ inputs.src-folder ]]/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      when: manual
      allow_failure: true
  needs: ["$[[ inputs.src-folder ]] preprod build"]
  script:
    - dfx deploy --network $TARGET_NETWORK --no-wallet --mode reinstall -y $[[ inputs.src-folder ]]
  environment:
    name: $[[ inputs.src-folder ]] frontend
    deployment_tier: testing
    action: start

# PRODUCTION DEPLOYMENT

$[[ inputs.src-folder ]] production deploy:
  stage: deploy
  resource_group: frontend production deployment
  variables:
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
    DEPLOY_VIA_SNS_PROPOSAL: $[[ inputs.sns-controlled ]]
    TARGET_NETWORK: ic
  needs: ["$[[ inputs.src-folder ]] production build"]
  rules:
    - if: $CI_COMMIT_TAG =~ '/^$[[ inputs.src-folder ]]-v\d+\.\d+\.\d+$/'
      changes:
        - "frontend/$[[ inputs.src-folder ]]/*.{js,json}"
        - "frontend/$[[ inputs.src-folder ]]/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      when: manual
  before_script:
    - !reference [.import dfx identity, before_script]
    - !reference [.include didc, before_script]
  script:
    - |
      echo "Deploying via proposal: " $DEPLOY_VIA_SNS_PROPOSAL
      if [ "$DEPLOY_VIA_SNS_PROPOSAL" = true ]; then
        . scripts/frontend-deploy/sns_frontend_deploy.sh $[[ inputs.src-folder ]] $TARGET_NETWORK
      else
        dfx deploy --network $TARGET_NETWORK --no-wallet --mode reinstall -y $[[ inputs.src-folder ]]
      fi
  environment:
    name: $[[ inputs.src-folder ]] frontend
    deployment_tier: production
    action: start
